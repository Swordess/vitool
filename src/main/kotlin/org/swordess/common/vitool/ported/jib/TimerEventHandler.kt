/*
 * Copyright 2018 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package org.swordess.common.vitool.ported.jib

import com.google.cloud.tools.jib.event.events.TimerEvent


/** Handles [TimerEvent]s by producing log messages.  */
class TimerEventHandler
/**
 * Creates a new [TimerEventHandler] with a consumer for log messages generated by handling
 * [TimerEvent]s.
 *
 * @param logMessageConsumer the log message consumer
 */(private val logMessageConsumer: (String)->Unit) : (TimerEvent)->Unit {

    override fun invoke(timerEvent: TimerEvent) {
        logMessageConsumer.invoke(buildLogMessage(timerEvent))
    }

    companion object {

        /**
         * Gets a [StringBuilder] prepended with tabulation based on the number of parents `timer` has.
         *
         * @param timer the [TimerEvent.Timer] to base the tabulation on
         * @return a new [StringBuilder]
         */
        private fun getTabs(timer: TimerEvent.Timer): StringBuilder {
            var timer0 = timer
            val tabs = StringBuilder()
            while (timer0.parent.isPresent) {
                tabs.append("\t")
                timer0 = timer0.parent.get()
            }
            return tabs
        }

        /**
         * Builds the log message for a [TimerEvent], based on its state and duration.
         *
         * @param timerEvent the [TimerEvent]
         * @return the built log message
         */
        private fun buildLogMessage(timerEvent: TimerEvent): String {
            val logMessageBuilder = getTabs(timerEvent.timer)
            return if (timerEvent.state == TimerEvent.State.START) {
                logMessageBuilder.append("TIMING\t").append(timerEvent.description).toString()
            } else {
                logMessageBuilder
                    .append("TIMED\t")
                    .append(timerEvent.description)
                    .append(" : ")
                    .append(timerEvent.duration.toNanos() / 1000 / 1000.0)
                    .append(" ms")
                    .toString()
            }
        }

    }

}